<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="packages_2j_query_8_validation_81_815_80_2_content_2_scripts_2jquery_8validate_8min_8js" kind="file" language="Javascript">
    <compoundname>jquery.validate.min.js</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="packages_2j_query_8_validation_81_815_80_2_content_2_scripts_2jquery_8validate_8min_8js_1afaeef3a1a07af568051b656bbbffec25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>!function</definition>
        <argsstring>(a)</argsstring>
        <name>!function</name>
        <param>
          <type>a</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>jQuery Validation Plugin - v1.15.0 - 2/24/2016 <ulink url="http://jqueryvalidation.org/">http://jqueryvalidation.org/</ulink> Copyright (c) 2016 JÃ¶rn Zaefferer; Licensed MIT </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nh228u08/Desktop/FinalProject/FinalProject/PCBuilder/packages/jQuery.Validation.1.15.0/Content/Scripts/jquery.validate.min.js" line="4" column="1" bodyfile="C:/Users/nh228u08/Desktop/FinalProject/FinalProject/PCBuilder/packages/jQuery.Validation.1.15.0/Content/Scripts/jquery.validate.min.js" bodystart="4" bodyend="4"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="normal">!</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">==typeof<sp/>define&amp;&amp;define.amd?define([</highlight><highlight class="stringliteral">&quot;jquery&quot;</highlight><highlight class="normal">],a):</highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">==typeof<sp/>module&amp;&amp;module.exports?module.exports=a(require(</highlight><highlight class="stringliteral">&quot;jquery&quot;</highlight><highlight class="normal">)):a(jQuery)}(function(a){a.extend(a.fn,{validate:function(b){if(!this.length)return<sp/>void(b&amp;&amp;b.debug&amp;&amp;window.console&amp;&amp;console.warn(</highlight><highlight class="stringliteral">&quot;Nothing<sp/>selected,<sp/>can&apos;t<sp/>validate,<sp/>returning<sp/>nothing.&quot;</highlight><highlight class="normal">));var<sp/>c=a.data(this[0],</highlight><highlight class="stringliteral">&quot;validator&quot;</highlight><highlight class="normal">);return<sp/>c?c:(this.attr(</highlight><highlight class="stringliteral">&quot;novalidate&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;novalidate&quot;</highlight><highlight class="normal">),c=new<sp/>a.validator(b,this[0]),a.data(this[0],</highlight><highlight class="stringliteral">&quot;validator&quot;</highlight><highlight class="normal">,c),c.settings.onsubmit&amp;&amp;(this.on(</highlight><highlight class="stringliteral">&quot;click.validate&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;:submit&quot;</highlight><highlight class="normal">,function(b){c.settings.submitHandler&amp;&amp;(c.submitButton=b.target),a(this).hasClass(</highlight><highlight class="stringliteral">&quot;cancel&quot;</highlight><highlight class="normal">)&amp;&amp;(c.cancelSubmit=!0),void<sp/>0!==a(this).attr(</highlight><highlight class="stringliteral">&quot;formnovalidate&quot;</highlight><highlight class="normal">)&amp;&amp;(c.cancelSubmit=!0)}),this.on(</highlight><highlight class="stringliteral">&quot;submit.validate&quot;</highlight><highlight class="normal">,function(b){function<sp/>d(){var<sp/>d,e;return<sp/>c.settings.submitHandler?(c.submitButton&amp;&amp;(d=a(</highlight><highlight class="stringliteral">&quot;&lt;input<sp/>type=&apos;hidden&apos;/&gt;&quot;</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)),e=c.settings.submitHandler.call(c,c.currentForm,b),c.submitButton&amp;&amp;d.remove(),void<sp/>0!==e?e:!1):!0}return<sp/>c.settings.debug&amp;&amp;b.preventDefault(),c.cancelSubmit?(c.cancelSubmit=!1,d()):c.form()?c.pendingRequest?(c.formSubmitted=!0,!1):d():(c.focusInvalid(),!1)})),c)},valid:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>b,c,d;return<sp/>a(this[0]).is(</highlight><highlight class="stringliteral">&quot;form&quot;</highlight><highlight class="normal">)?b=this.validate().form():(d=[],b=!0,c=a(this[0].form).validate(),this.each(function(){b=c.element(this)&amp;&amp;b,b||(d=d.concat(c.errorList))}),c.errorList=d),b},rules:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.length){var<sp/>d,e,f,g,h,i,j=</highlight><highlight class="keyword">this</highlight><highlight class="normal">[0];</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b)</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(d=a.data(j.form,</highlight><highlight class="stringliteral">&quot;validator&quot;</highlight><highlight class="normal">).settings,e=d.rules,f=a.validator.staticRules(j),b){</highlight><highlight class="keywordflow">case</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">:a.extend(f,a.validator.normalizeRule(c)),</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>f.messages,e[j.name]=f,c.messages&amp;&amp;(d.messages[j.name]=a.extend(d.messages[j.name],c.messages));</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">case</highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">:</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c?(i={},a.each(c.split(/\s/),</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){i[c]=f[c],</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>f[c],</highlight><highlight class="stringliteral">&quot;required&quot;</highlight><highlight class="normal">===c&amp;&amp;a(j).removeAttr(</highlight><highlight class="stringliteral">&quot;aria-required&quot;</highlight><highlight class="normal">)}),i):(delete<sp/>e[j.name],f)}return<sp/>g=a.validator.normalizeRules(a.extend({},a.validator.classRules(j),a.validator.attributeRules(j),a.validator.dataRules(j),a.validator.staticRules(j)),j),g.required&amp;&amp;(h=g.required,</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>g.required,g=a.extend({required:h},g),a(j).attr(</highlight><highlight class="stringliteral">&quot;aria-required&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)),g.remote&amp;&amp;(h=g.remote,</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>g.remote,g=a.extend(g,{remote:h})),g}}}),a.extend(a.expr[</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">],{blank:function(b){return!a.trim(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">+a(b).val())},filled:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){var<sp/>c=a(b).val();return<sp/>null!==c&amp;&amp;!!a.trim(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">+c)},unchecked:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){return!a(b).prop(</highlight><highlight class="stringliteral">&quot;checked&quot;</highlight><highlight class="normal">)}}),a.validator=</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){this.settings=a.extend(!0,{},a.validator.defaults,b),this.currentForm=c,this.init()},a.validator.format=</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1===arguments.length?</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>c=a.makeArray(arguments);</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.unshift(b),a.validator.format.apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,c)}:</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>0===c?b:(arguments.length&gt;2&amp;&amp;c.constructor!==Array&amp;&amp;(c=a.makeArray(arguments).slice(1)),c.constructor!==Array&amp;&amp;(c=[c]),a.each(c,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,c){b=b.replace(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RegExp(</highlight><highlight class="stringliteral">&quot;\\{&quot;</highlight><highlight class="normal">+a+</highlight><highlight class="stringliteral">&quot;\\}&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">),</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c})}),b)},a.extend(a.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,pendingClass:</highlight><highlight class="stringliteral">&quot;pending&quot;</highlight><highlight class="normal">,validClass:</highlight><highlight class="stringliteral">&quot;valid&quot;</highlight><highlight class="normal">,errorElement:</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">,focusCleanup:!1,focusInvalid:!0,errorContainer:a([]),errorLabelContainer:a([]),onsubmit:!0,ignore:</highlight><highlight class="stringliteral">&quot;:hidden&quot;</highlight><highlight class="normal">,ignoreTitle:!1,onfocusin:function(a){this.lastActive=a,this.settings.focusCleanup&amp;&amp;(this.settings.unhighlight&amp;&amp;this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(a)))},onfocusout:function(a){this.checkable(a)||!(a.name<sp/>in<sp/>this.submitted)&amp;&amp;this.optional(a)||this.element(a)},onkeyup:function(b,c){var<sp/>d=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===c.which&amp;&amp;</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">===this.elementValue(b)||-1!==a.inArray(c.keyCode,d)||(b.name<sp/>in<sp/>this.submitted||b.name<sp/>in<sp/>this.invalid)&amp;&amp;this.element(b)},onclick:function(a){a.name<sp/>in<sp/>this.submitted?this.element(a):a.parentNode.name<sp/>in<sp/>this.submitted&amp;&amp;this.element(a.parentNode)},highlight:function(b,c,d){</highlight><highlight class="stringliteral">&quot;radio&quot;</highlight><highlight class="normal">===b.type?this.findByName(b.name).addClass(c).removeClass(d):a(b).addClass(c).removeClass(d)},unhighlight:function(b,c,d){</highlight><highlight class="stringliteral">&quot;radio&quot;</highlight><highlight class="normal">===b.type?this.findByName(b.name).removeClass(c).addClass(d):a(b).removeClass(c).addClass(d)}},setDefaults:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){a.extend(a.validator.defaults,b)},messages:{required:</highlight><highlight class="stringliteral">&quot;This<sp/>field<sp/>is<sp/>required.&quot;</highlight><highlight class="normal">,remote:</highlight><highlight class="stringliteral">&quot;Please<sp/>fix<sp/>this<sp/>field.&quot;</highlight><highlight class="normal">,email:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>valid<sp/>email<sp/>address.&quot;</highlight><highlight class="normal">,url:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>valid<sp/>URL.&quot;</highlight><highlight class="normal">,date:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>valid<sp/>date.&quot;</highlight><highlight class="normal">,dateISO:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>valid<sp/>date<sp/>(<sp/>ISO<sp/>).&quot;</highlight><highlight class="normal">,number:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>valid<sp/>number.&quot;</highlight><highlight class="normal">,digits:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>only<sp/>digits.&quot;</highlight><highlight class="normal">,equalTo:</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>the<sp/>same<sp/>value<sp/>again.&quot;</highlight><highlight class="normal">,maxlength:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>no<sp/>more<sp/>than<sp/>{0}<sp/>characters.&quot;</highlight><highlight class="normal">),minlength:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>at<sp/>least<sp/>{0}<sp/>characters.&quot;</highlight><highlight class="normal">),rangelength:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>value<sp/>between<sp/>{0}<sp/>and<sp/>{1}<sp/>characters<sp/>long.&quot;</highlight><highlight class="normal">),range:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>value<sp/>between<sp/>{0}<sp/>and<sp/>{1}.&quot;</highlight><highlight class="normal">),max:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>value<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>{0}.&quot;</highlight><highlight class="normal">),min:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>value<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>{0}.&quot;</highlight><highlight class="normal">),step:a.validator.format(</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>a<sp/>multiple<sp/>of<sp/>{0}.&quot;</highlight><highlight class="normal">)},autoCreateRanges:!1,prototype:{init:function(){function<sp/>b(b){var<sp/>c=a.data(this.form,</highlight><highlight class="stringliteral">&quot;validator&quot;</highlight><highlight class="normal">),d=</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">+b.type.replace(/^validate/,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),e=c.settings;e[d]&amp;&amp;!a(this).is(e.ignore)&amp;&amp;e[d].call(c,this,b)}this.labelContainer=a(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&amp;&amp;this.labelContainer||a(this.currentForm),this.containers=a(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var<sp/>c,d=this.groups={};a.each(this.settings.groups,function(b,c){</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">==typeof<sp/>c&amp;&amp;(c=c.split(/\s/)),a.each(c,function(a,c){d[c]=b})}),c=this.settings.rules,a.each(c,function(b,d){c[b]=a.validator.normalizeRule(d)}),a(this.currentForm).on(</highlight><highlight class="stringliteral">&quot;focusin.validate<sp/>focusout.validate<sp/>keyup.validate&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;:text,<sp/>[type=&apos;password&apos;],<sp/>[type=&apos;file&apos;],<sp/>select,<sp/>textarea,<sp/>[type=&apos;number&apos;],<sp/>[type=&apos;search&apos;],<sp/>[type=&apos;tel&apos;],<sp/>[type=&apos;url&apos;],<sp/>[type=&apos;email&apos;],<sp/>[type=&apos;datetime&apos;],<sp/>[type=&apos;date&apos;],<sp/>[type=&apos;month&apos;],<sp/>[type=&apos;week&apos;],<sp/>[type=&apos;time&apos;],<sp/>[type=&apos;datetime-local&apos;],<sp/>[type=&apos;range&apos;],<sp/>[type=&apos;color&apos;],<sp/>[type=&apos;radio&apos;],<sp/>[type=&apos;checkbox&apos;],<sp/>[contenteditable]&quot;</highlight><highlight class="normal">,b).on(</highlight><highlight class="stringliteral">&quot;click.validate&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;select,<sp/>option,<sp/>[type=&apos;radio&apos;],<sp/>[type=&apos;checkbox&apos;]&quot;</highlight><highlight class="normal">,b),this.settings.invalidHandler&amp;&amp;a(this.currentForm).on(</highlight><highlight class="stringliteral">&quot;invalid-form.validate&quot;</highlight><highlight class="normal">,this.settings.invalidHandler),a(this.currentForm).find(</highlight><highlight class="stringliteral">&quot;[required],<sp/>[data-rule-required],<sp/>.required&quot;</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;aria-required&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)},form:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){return<sp/>this.checkForm(),a.extend(this.submitted,this.errorMap),this.invalid=a.extend({},</highlight><highlight class="keyword">this</highlight><highlight class="normal">.errorMap),this.valid()||a(this.currentForm).triggerHandler(</highlight><highlight class="stringliteral">&quot;invalid-form&quot;</highlight><highlight class="normal">,[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]),this.showErrors(),this.valid()},checkForm:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){this.prepareForm();</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(var<sp/>a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.valid()},element:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){var<sp/>c,d,e=this.clean(b),f=this.validationTargetFor(e),g=</highlight><highlight class="keyword">this</highlight><highlight class="normal">,h=!0;</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>0===f?</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this.invalid[e.name]:(this.prepareElement(f),this.currentElements=a(f),d=this.groups[f.name],d&amp;&amp;a.each(this.groups,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,b){b===d&amp;&amp;a!==f.name&amp;&amp;(e=g.validationTargetFor(g.clean(g.findByName(a))),e&amp;&amp;e.name<sp/>in<sp/>g.invalid&amp;&amp;(g.currentElements.push(e),h=h&amp;&amp;g.check(e)))}),c=this.check(f)!==!1,h=h&amp;&amp;c,c?this.invalid[f.name]=!1:this.invalid[f.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),a(b).attr(</highlight><highlight class="stringliteral">&quot;aria-invalid&quot;</highlight><highlight class="normal">,!c)),h},showErrors:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){var<sp/>c=</highlight><highlight class="keyword">this</highlight><highlight class="normal">;a.extend(this.errorMap,b),this.errorList=a.map(this.errorMap,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,b){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{message:a,element:c.findByName(b)[0]}}),this.successList=a.grep(</highlight><highlight class="keyword">this</highlight><highlight class="normal">.successList,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){return!(a.name<sp/>in<sp/>b)})}this.settings.showErrors?this.settings.showErrors.call(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){a.fn.resetForm&amp;&amp;a(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var<sp/>b=this.elements().removeData(</highlight><highlight class="stringliteral">&quot;previousValue&quot;</highlight><highlight class="normal">).removeAttr(</highlight><highlight class="stringliteral">&quot;aria-invalid&quot;</highlight><highlight class="normal">);this.resetElements(b)},resetElements:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){var<sp/>b;</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.settings.unhighlight)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(b=0;a[b];b++)this.settings.unhighlight.call(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,a[b],</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.errorClass,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),this.findByName(a[b].name).removeClass(this.settings.validClass);</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>a.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.objectLength(this.invalid)},objectLength:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){var<sp/>b,c=0;</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(b<sp/>in<sp/>a)a[b]&amp;&amp;c++;</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c},hideErrors:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){this.hideThese(this.toHide)},hideThese:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){a.not(this.containers).text(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),this.addWrapper(a).hide()},valid:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0===this.size()},size:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.errorList.length},focusInvalid:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.settings.focusInvalid)</highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{a(this.findLastActive()||this.errorList.length&amp;&amp;</highlight><highlight class="keyword">this</highlight><highlight class="normal">.errorList[0].element||[]).filter(</highlight><highlight class="stringliteral">&quot;:visible&quot;</highlight><highlight class="normal">).focus().trigger(</highlight><highlight class="stringliteral">&quot;focusin&quot;</highlight><highlight class="normal">)}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(b){}},findLastActive:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>b=this.lastActive;</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b&amp;&amp;1===a.grep(this.errorList,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.element.name===b.name}).length&amp;&amp;b},elements:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>b=</highlight><highlight class="keyword">this</highlight><highlight class="normal">,c={};</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(this.currentForm).find(</highlight><highlight class="stringliteral">&quot;input,<sp/>select,<sp/>textarea,<sp/>[contenteditable]&quot;</highlight><highlight class="normal">).not(</highlight><highlight class="stringliteral">&quot;:submit,<sp/>:reset,<sp/>:image,<sp/>:disabled&quot;</highlight><highlight class="normal">).not(this.settings.ignore).filter(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>d=this.name||a(</highlight><highlight class="keyword">this</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">!d&amp;&amp;b.settings.debug&amp;&amp;window.console&amp;&amp;console.error(</highlight><highlight class="stringliteral">&quot;%o<sp/>has<sp/>no<sp/>name<sp/>assigned&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),this.hasAttribute(</highlight><highlight class="stringliteral">&quot;contenteditable&quot;</highlight><highlight class="normal">)&amp;&amp;(this.form=a(</highlight><highlight class="keyword">this</highlight><highlight class="normal">).closest(</highlight><highlight class="stringliteral">&quot;form&quot;</highlight><highlight class="normal">)[0]),d<sp/>in<sp/>c||!b.objectLength(a(</highlight><highlight class="keyword">this</highlight><highlight class="normal">).rules())?!1:(c[d]=!0,!0)})},clean:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(b)[0]},errors:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>b=this.settings.errorClass.split(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">).join(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(this.settings.errorElement+</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">+b,</highlight><highlight class="keyword">this</highlight><highlight class="normal">.errorContext)},resetInternals:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=a([]),this.toHide=a([])},reset:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){this.resetInternals(),this.currentElements=a([])},prepareForm:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){this.reset(),this.toHide=this.errorsFor(a)},elementValue:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){var<sp/>c,d,e=a(b),f=b.type;</highlight><highlight class="keywordflow">return</highlight><highlight class="stringliteral">&quot;radio&quot;</highlight><highlight class="normal">===f||</highlight><highlight class="stringliteral">&quot;checkbox&quot;</highlight><highlight class="normal">===f?this.findByName(b.name).filter(</highlight><highlight class="stringliteral">&quot;:checked&quot;</highlight><highlight class="normal">).val():</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">===f&amp;&amp;</highlight><highlight class="stringliteral">&quot;undefined&quot;</highlight><highlight class="normal">!=typeof<sp/>b.validity?b.validity.badInput?</highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal">:e.val():(c=b.hasAttribute(</highlight><highlight class="stringliteral">&quot;contenteditable&quot;</highlight><highlight class="normal">)?e.text():e.val(),</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">===f?</highlight><highlight class="stringliteral">&quot;C:\\fakepath\\&quot;</highlight><highlight class="normal">===c.substr(0,12)?c.substr(12):(d=c.lastIndexOf(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">),d&gt;=0?c.substr(d+1):(d=c.lastIndexOf(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">),d&gt;=0?c.substr(d+1):c)):</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">==typeof<sp/>c?c.replace(/\r/g,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">):c)},check:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){b=this.validationTargetFor(this.clean(b));var<sp/>c,d,e,f=a(b).rules(),g=a.map(f,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,b){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b}).length,h=!1,i=this.elementValue(b);</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">==typeof<sp/>f.normalizer){</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i=f.normalizer.call(b,i),</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">!=typeof<sp/>i)</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;The<sp/>normalizer<sp/>should<sp/>return<sp/>a<sp/>string<sp/>value.&quot;</highlight><highlight class="normal">);</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>f.normalizer}</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(d<sp/>in<sp/>f){e={method:d,parameters:f[d]};</highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c=a.validator.methods[d].call(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,i,b,e.parameters),</highlight><highlight class="stringliteral">&quot;dependency-mismatch&quot;</highlight><highlight class="normal">===c&amp;&amp;1===g){h=!0;</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">}</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h=!1,</highlight><highlight class="stringliteral">&quot;pending&quot;</highlight><highlight class="normal">===c)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(this.toHide=this.toHide.not(</highlight><highlight class="keyword">this</highlight><highlight class="normal">.errorsFor(b)));</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!c)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.formatAndAdd(b,e),!1}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(j){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>this.settings.debug&amp;&amp;window.console&amp;&amp;console.log(</highlight><highlight class="stringliteral">&quot;Exception<sp/>occurred<sp/>when<sp/>checking<sp/>element<sp/>&quot;</highlight><highlight class="normal">+b.id+</highlight><highlight class="stringliteral">&quot;,<sp/>check<sp/>the<sp/>&apos;&quot;</highlight><highlight class="normal">+e.method+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>method.&quot;</highlight><highlight class="normal">,j),j<sp/>instanceof<sp/>TypeError&amp;&amp;(j.message+=</highlight><highlight class="stringliteral">&quot;.<sp/><sp/>Exception<sp/>occurred<sp/>when<sp/>checking<sp/>element<sp/>&quot;</highlight><highlight class="normal">+b.id+</highlight><highlight class="stringliteral">&quot;,<sp/>check<sp/>the<sp/>&apos;&quot;</highlight><highlight class="normal">+e.method+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>method.&quot;</highlight><highlight class="normal">),j}}</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!h)return<sp/>this.objectLength(f)&amp;&amp;this.successList.push(b),!0},customDataMessage:function(b,c){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(b).data(</highlight><highlight class="stringliteral">&quot;msg&quot;</highlight><highlight class="normal">+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase())||a(b).data(</highlight><highlight class="stringliteral">&quot;msg&quot;</highlight><highlight class="normal">)},customMessage:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,b){var<sp/>c=this.settings.messages[a];</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c&amp;&amp;(c.constructor===String?c:c[b])},findDefined:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(var<sp/>a=0;a&lt;arguments.length;a++)</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>0!==arguments[a])</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arguments[a]},defaultMessage:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){var<sp/>d=this.findDefined(this.customMessage(b.name,c.method),</highlight><highlight class="keyword">this</highlight><highlight class="normal">.customDataMessage(b,c.method),!this.settings.ignoreTitle&amp;&amp;b.title||</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>0,a.validator.messages[c.method],</highlight><highlight class="stringliteral">&quot;&lt;strong&gt;Warning:<sp/>No<sp/>message<sp/>defined<sp/>for<sp/>&quot;</highlight><highlight class="normal">+b.name+</highlight><highlight class="stringliteral">&quot;&lt;/strong&gt;&quot;</highlight><highlight class="normal">),e=/\$?\{(\d+)\}/g;</highlight><highlight class="keywordflow">return</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">==typeof<sp/>d?d=d.call(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,c.parameters,b):e.test(d)&amp;&amp;(d=a.validator.format(d.replace(e,</highlight><highlight class="stringliteral">&quot;{$1}&quot;</highlight><highlight class="normal">),c.parameters)),d},formatAndAdd:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,b){var<sp/>c=this.defaultMessage(a,b);this.errorList.push({message:c,element:a,method:b.method}),this.errorMap[a.name]=c,</highlight><highlight class="keyword">this</highlight><highlight class="normal">.submitted[a.name]=c},addWrapper:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.settings.wrapper&amp;&amp;(a=a.add(a.parent(</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.wrapper))),a},defaultShowErrors:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){var<sp/>a,b,c;</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(a=0;this.errorList[a];a++)c=this.errorList[a],this.settings.highlight&amp;&amp;</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.highlight.call(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,c.element,</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.errorClass,</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.validClass),this.showLabel(c.element,c.message);</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.errorList.length&amp;&amp;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">.toShow=</highlight><highlight class="keyword">this</highlight><highlight class="normal">.toShow.add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">.containers)),this.settings.success)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(a=0;this.successList[a];a++)this.showLabel(this.successList[a]);</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.settings.unhighlight)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(a=0,b=this.validElements();b[a];a++)this.settings.unhighlight.call(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,b[a],</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.errorClass,</highlight><highlight class="keyword">this</highlight><highlight class="normal">.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.currentElements.not(this.invalidElements())},invalidElements:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(this.errorList).map(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.element})},showLabel:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){var<sp/>d,e,f,g,h=this.errorsFor(b),i=this.idOrName(b),j=a(b).attr(</highlight><highlight class="stringliteral">&quot;aria-describedby&quot;</highlight><highlight class="normal">);h.length?(h.removeClass(this.settings.validClass).addClass(this.settings.errorClass),h.html(c)):(h=a(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">+this.settings.errorElement+</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,i+</highlight><highlight class="stringliteral">&quot;-error&quot;</highlight><highlight class="normal">).addClass(this.settings.errorClass).html(c||</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),d=h,this.settings.wrapper&amp;&amp;(d=h.hide().show().wrap(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">+this.settings.wrapper+</highlight><highlight class="stringliteral">&quot;/&gt;&quot;</highlight><highlight class="normal">).parent()),this.labelContainer.length?</highlight><highlight class="keyword">this</highlight><highlight class="normal">.labelContainer.append(d):this.settings.errorPlacement?this.settings.errorPlacement(d,a(b)):d.insertAfter(b),h.is(</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">)?h.attr(</highlight><highlight class="stringliteral">&quot;for&quot;</highlight><highlight class="normal">,i):0===h.parents(</highlight><highlight class="stringliteral">&quot;label[for=&apos;&quot;</highlight><highlight class="normal">+this.escapeCssMeta(i)+</highlight><highlight class="stringliteral">&quot;&apos;]&quot;</highlight><highlight class="normal">).length&amp;&amp;(f=h.attr(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">),j?j.match(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RegExp(</highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">+this.escapeCssMeta(f)+</highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">))||(j+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+f):j=f,a(b).attr(</highlight><highlight class="stringliteral">&quot;aria-describedby&quot;</highlight><highlight class="normal">,j),e=this.groups[b.name],e&amp;&amp;(g=</highlight><highlight class="keyword">this</highlight><highlight class="normal">,a.each(g.groups,</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b,c){c===e&amp;&amp;a(</highlight><highlight class="stringliteral">&quot;[name=&apos;&quot;</highlight><highlight class="normal">+g.escapeCssMeta(b)+</highlight><highlight class="stringliteral">&quot;&apos;]&quot;</highlight><highlight class="normal">,g.currentForm).attr(</highlight><highlight class="stringliteral">&quot;aria-describedby&quot;</highlight><highlight class="normal">,h.attr(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">))})))),!c&amp;&amp;this.settings.success&amp;&amp;(h.text(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">==typeof<sp/>this.settings.success?h.addClass(this.settings.success):this.settings.success(h,b)),this.toShow=this.toShow.add(h)},errorsFor:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(b){var<sp/>c=this.escapeCssMeta(this.idOrName(b)),d=a(b).attr(</highlight><highlight class="stringliteral">&quot;aria-describedby&quot;</highlight><highlight class="normal">),e=</highlight><highlight class="stringliteral">&quot;label[for=&apos;&quot;</highlight><highlight class="normal">+c+</highlight><highlight class="stringliteral">&quot;&apos;],<sp/>label[for=&apos;&quot;</highlight><highlight class="normal">+c+</highlight><highlight class="stringliteral">&quot;&apos;]<sp/>*&quot;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d&amp;&amp;(e=e+</highlight><highlight class="stringliteral">&quot;,<sp/>#&quot;</highlight><highlight class="normal">+this.escapeCssMeta(d).replace(/\s+/g,</highlight><highlight class="stringliteral">&quot;,<sp/>#&quot;</highlight><highlight class="normal">)),this.errors().filter(e)},escapeCssMeta:</highlight><highlight class="keyword">function</highlight><highlight class="normal">(a){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.replace(/([\\!</highlight><highlight class="stringliteral">&quot;#$%&amp;&apos;()*+,./:;&lt;=&gt;?@\[\]^`{|}~])/g,&quot;</highlight><highlight class="normal">\\$1</highlight><highlight class="stringliteral">&quot;)},idOrName:function(a){return<sp/>this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},validationTargetFor:function(b){return<sp/>this.checkable(b)&amp;&amp;(b=this.findByName(b.name)),a(b).not(this.settings.ignore)[0]},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(b){return<sp/>a(this.currentForm).find(&quot;</highlight><highlight class="normal">[name=</highlight><highlight class="stringliteral">&apos;&quot;+this.escapeCssMeta(b)+&quot;&apos;</highlight><highlight class="normal">]</highlight><highlight class="stringliteral">&quot;)},getLength:function(b,c){switch(c.nodeName.toLowerCase()){case&quot;</highlight><highlight class="normal">select</highlight><highlight class="stringliteral">&quot;:return<sp/>a(&quot;</highlight><highlight class="normal">option:selected</highlight><highlight class="stringliteral">&quot;,c).length;case&quot;</highlight><highlight class="normal">input</highlight><highlight class="stringliteral">&quot;:if(this.checkable(c))return<sp/>this.findByName(c.name).filter(&quot;</highlight><highlight class="normal">:checked</highlight><highlight class="stringliteral">&quot;).length}return<sp/>b.length},depend:function(a,b){return<sp/>this.dependTypes[typeof<sp/>a]?this.dependTypes[typeof<sp/>a](a,b):!0},dependTypes:{&quot;</highlight><highlight class="keywordtype">boolean</highlight><highlight class="stringliteral">&quot;:function(a){return<sp/>a},string:function(b,c){return!!a(b,c.form).length},&quot;</highlight><highlight class="keyword">function</highlight><highlight class="stringliteral">&quot;:function(a,b){return<sp/>a(b)}},optional:function(b){var<sp/>c=this.elementValue(b);return!a.validator.methods.required.call(this,c,b)&amp;&amp;&quot;</highlight><highlight class="normal">dependency-mismatch</highlight><highlight class="stringliteral">&quot;},startRequest:function(b){this.pending[b.name]||(this.pendingRequest++,a(b).addClass(this.settings.pendingClass),this.pending[b.name]=!0)},stopRequest:function(b,c){this.pendingRequest--,this.pendingRequest&lt;0&amp;&amp;(this.pendingRequest=0),delete<sp/>this.pending[b.name],a(b).removeClass(this.settings.pendingClass),c&amp;&amp;0===this.pendingRequest&amp;&amp;this.formSubmitted&amp;&amp;this.form()?(a(this.currentForm).submit(),this.formSubmitted=!1):!c&amp;&amp;0===this.pendingRequest&amp;&amp;this.formSubmitted&amp;&amp;(a(this.currentForm).triggerHandler(&quot;</highlight><highlight class="normal">invalid-form</highlight><highlight class="stringliteral">&quot;,[this]),this.formSubmitted=!1)},previousValue:function(b,c){return<sp/>a.data(b,&quot;</highlight><highlight class="normal">previousValue</highlight><highlight class="stringliteral">&quot;)||a.data(b,&quot;</highlight><highlight class="normal">previousValue</highlight><highlight class="stringliteral">&quot;,{old:null,valid:!0,message:this.defaultMessage(b,{method:c})})},destroy:function(){this.resetForm(),a(this.currentForm).off(&quot;</highlight><highlight class="normal">.validate</highlight><highlight class="stringliteral">&quot;).removeData(&quot;</highlight><highlight class="normal">validator</highlight><highlight class="stringliteral">&quot;).find(&quot;</highlight><highlight class="normal">.validate-equalTo-blur</highlight><highlight class="stringliteral">&quot;).off(&quot;</highlight><highlight class="normal">.validate-equalTo</highlight><highlight class="stringliteral">&quot;).removeClass(&quot;</highlight><highlight class="normal">validate-equalTo-blur</highlight><highlight class="stringliteral">&quot;)}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(b,c){b.constructor===String?this.classRuleSettings[b]=c:a.extend(this.classRuleSettings,b)},classRules:function(b){var<sp/>c={},d=a(b).attr(&quot;</highlight><highlight class="keyword">class</highlight><highlight class="stringliteral">&quot;);return<sp/>d&amp;&amp;a.each(d.split(&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;),function(){this<sp/>in<sp/>a.validator.classRuleSettings&amp;&amp;a.extend(c,a.validator.classRuleSettings[this])}),c},normalizeAttributeRule:function(a,b,c,d){/min|max|step/.test(c)&amp;&amp;(null===b||/number|range|text/.test(b))&amp;&amp;(d=Number(d),isNaN(d)&amp;&amp;(d=void<sp/>0)),d||0===d?a[c]=d:b===c&amp;&amp;&quot;</highlight><highlight class="normal">range</highlight><highlight class="stringliteral">&quot;!==b&amp;&amp;(a[c]=!0)},attributeRules:function(b){var<sp/>c,d,e={},f=a(b),g=b.getAttribute(&quot;</highlight><highlight class="normal">type</highlight><highlight class="stringliteral">&quot;);for(c<sp/>in<sp/>a.validator.methods)&quot;</highlight><highlight class="normal">required</highlight><highlight class="stringliteral">&quot;===c?(d=b.getAttribute(c),&quot;</highlight><highlight class="stringliteral">&quot;===d&amp;&amp;(d=!0),d=!!d):d=f.attr(c),this.normalizeAttributeRule(e,g,c,d);return<sp/>e.maxlength&amp;&amp;/-1|2147483647|524288/.test(e.maxlength)&amp;&amp;delete<sp/>e.maxlength,e},dataRules:function(b){var<sp/>c,d,e={},f=a(b),g=b.getAttribute(&quot;</highlight><highlight class="normal">type</highlight><highlight class="stringliteral">&quot;);for(c<sp/>in<sp/>a.validator.methods)d=f.data(&quot;</highlight><highlight class="normal">rule</highlight><highlight class="stringliteral">&quot;+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase()),this.normalizeAttributeRule(e,g,c,d);return<sp/>e},staticRules:function(b){var<sp/>c={},d=a.data(b.form,&quot;</highlight><highlight class="normal">validator</highlight><highlight class="stringliteral">&quot;);return<sp/>d.settings.rules&amp;&amp;(c=a.validator.normalizeRule(d.settings.rules[b.name])||{}),c},normalizeRules:function(b,c){return<sp/>a.each(b,function(d,e){if(e===!1)return<sp/>void<sp/>delete<sp/>b[d];if(e.param||e.depends){var<sp/>f=!0;switch(typeof<sp/>e.depends){case&quot;</highlight><highlight class="keywordtype">string</highlight><highlight class="stringliteral">&quot;:f=!!a(e.depends,c.form).length;break;case&quot;</highlight><highlight class="keyword">function</highlight><highlight class="stringliteral">&quot;:f=e.depends.call(c,c)}f?b[d]=void<sp/>0!==e.param?e.param:!0:(a.data(c.form,&quot;</highlight><highlight class="normal">validator</highlight><highlight class="stringliteral">&quot;).resetElements(a(c)),delete<sp/>b[d])}}),a.each(b,function(d,e){b[d]=a.isFunction(e)&amp;&amp;&quot;</highlight><highlight class="normal">normalizer</highlight><highlight class="stringliteral">&quot;!==d?e(c):e}),a.each([&quot;</highlight><highlight class="normal">minlength</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">maxlength</highlight><highlight class="stringliteral">&quot;],function(){b[this]&amp;&amp;(b[this]=Number(b[this]))}),a.each([&quot;</highlight><highlight class="normal">rangelength</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">range</highlight><highlight class="stringliteral">&quot;],function(){var<sp/>c;b[this]&amp;&amp;(a.isArray(b[this])?b[this]=[Number(b[this][0]),Number(b[this][1])]:&quot;</highlight><highlight class="keywordtype">string</highlight><highlight class="stringliteral">&quot;==typeof<sp/>b[this]&amp;&amp;(c=b[this].replace(/[\[\]]/g,&quot;</highlight><highlight class="stringliteral">&quot;).split(/[\s,]+/),b[this]=[Number(c[0]),Number(c[1])]))}),a.validator.autoCreateRanges&amp;&amp;(null!=b.min&amp;&amp;null!=b.max&amp;&amp;(b.range=[b.min,b.max],delete<sp/>b.min,delete<sp/>b.max),null!=b.minlength&amp;&amp;null!=b.maxlength&amp;&amp;(b.rangelength=[b.minlength,b.maxlength],delete<sp/>b.minlength,delete<sp/>b.maxlength)),b},normalizeRule:function(b){if(&quot;</highlight><highlight class="keywordtype">string</highlight><highlight class="stringliteral">&quot;==typeof<sp/>b){var<sp/>c={};a.each(b.split(/\s/),function(){c[this]=!0}),b=c}return<sp/>b},addMethod:function(b,c,d){a.validator.methods[b]=c,a.validator.messages[b]=void<sp/>0!==d?d:a.validator.messages[b],c.length&lt;3&amp;&amp;a.validator.addClassRules(b,a.validator.normalizeRule(b))},methods:{required:function(b,c,d){if(!this.depend(d,c))return&quot;</highlight><highlight class="normal">dependency-mismatch</highlight><highlight class="stringliteral">&quot;;if(&quot;</highlight><highlight class="normal">select</highlight><highlight class="stringliteral">&quot;===c.nodeName.toLowerCase()){var<sp/>e=a(c).val();return<sp/>e&amp;&amp;e.length&gt;0}return<sp/>this.checkable(c)?this.getLength(b,c)&gt;0:b.length&gt;0},email:function(a,b){return<sp/>this.optional(b)||/^[a-zA-Z0-9.!#$%&amp;&apos;*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)},url:function(a,b){return<sp/>this.optional(b)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a)},date:function(a,b){return<sp/>this.optional(b)||!/Invalid|NaN/.test(new<sp/>Date(a).toString())},dateISO:function(a,b){return<sp/>this.optional(b)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a)},number:function(a,b){return<sp/>this.optional(b)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)},digits:function(a,b){return<sp/>this.optional(b)||/^\d+$/.test(a)},minlength:function(b,c,d){var<sp/>e=a.isArray(b)?b.length:this.getLength(b,c);return<sp/>this.optional(c)||e&gt;=d},maxlength:function(b,c,d){var<sp/>e=a.isArray(b)?b.length:this.getLength(b,c);return<sp/>this.optional(c)||d&gt;=e},rangelength:function(b,c,d){var<sp/>e=a.isArray(b)?b.length:this.getLength(b,c);return<sp/>this.optional(c)||e&gt;=d[0]&amp;&amp;e&lt;=d[1]},min:function(a,b,c){return<sp/>this.optional(b)||a&gt;=c},max:function(a,b,c){return<sp/>this.optional(b)||c&gt;=a},range:function(a,b,c){return<sp/>this.optional(b)||a&gt;=c[0]&amp;&amp;a&lt;=c[1]},step:function(b,c,d){var<sp/>e=a(c).attr(&quot;</highlight><highlight class="normal">type</highlight><highlight class="stringliteral">&quot;),f=&quot;</highlight><highlight class="normal">Step<sp/>attribute<sp/>on<sp/>input<sp/>type<sp/></highlight><highlight class="stringliteral">&quot;+e+&quot;</highlight><highlight class="normal"><sp/>is<sp/>not<sp/>supported.</highlight><highlight class="stringliteral">&quot;,g=[&quot;</highlight><highlight class="normal">text</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">number</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">range</highlight><highlight class="stringliteral">&quot;],h=new<sp/>RegExp(&quot;</highlight><highlight class="normal">\\b</highlight><highlight class="stringliteral">&quot;+e+&quot;</highlight><highlight class="normal">\\b</highlight><highlight class="stringliteral">&quot;),i=e&amp;&amp;!h.test(g.join());if(i)throw<sp/>new<sp/>Error(f);return<sp/>this.optional(c)||b%d===0},equalTo:function(b,c,d){var<sp/>e=a(d);return<sp/>this.settings.onfocusout&amp;&amp;e.not(&quot;</highlight><highlight class="normal">.validate-equalTo-blur</highlight><highlight class="stringliteral">&quot;).length&amp;&amp;e.addClass(&quot;</highlight><highlight class="normal">validate-equalTo-blur</highlight><highlight class="stringliteral">&quot;).on(&quot;</highlight><highlight class="normal">blur.validate-equalTo</highlight><highlight class="stringliteral">&quot;,function(){a(c).valid()}),b===e.val()},remote:function(b,c,d,e){if(this.optional(c))return&quot;</highlight><highlight class="normal">dependency-mismatch</highlight><highlight class="stringliteral">&quot;;e=&quot;</highlight><highlight class="keywordtype">string</highlight><highlight class="stringliteral">&quot;==typeof<sp/>e&amp;&amp;e||&quot;</highlight><highlight class="normal">remote</highlight><highlight class="stringliteral">&quot;;var<sp/>f,g,h,i=this.previousValue(c,e);return<sp/>this.settings.messages[c.name]||(this.settings.messages[c.name]={}),i.originalMessage=i.originalMessage||this.settings.messages[c.name][e],this.settings.messages[c.name][e]=i.message,d=&quot;</highlight><highlight class="keywordtype">string</highlight><highlight class="stringliteral">&quot;==typeof<sp/>d&amp;&amp;{url:d}||d,h=a.param(a.extend({data:b},d.data)),i.old===h?i.valid:(i.old=h,f=this,this.startRequest(c),g={},g[c.name]=b,a.ajax(a.extend(!0,{mode:&quot;</highlight><highlight class="normal">abort</highlight><highlight class="stringliteral">&quot;,port:&quot;</highlight><highlight class="normal">validate</highlight><highlight class="stringliteral">&quot;+c.name,dataType:&quot;</highlight><highlight class="normal">json</highlight><highlight class="stringliteral">&quot;,data:g,context:f.currentForm,success:function(a){var<sp/>d,g,h,j=a===!0||&quot;</highlight><highlight class="keyword">true</highlight><highlight class="stringliteral">&quot;===a;f.settings.messages[c.name][e]=i.originalMessage,j?(h=f.formSubmitted,f.resetInternals(),f.toHide=f.errorsFor(c),f.formSubmitted=h,f.successList.push(c),f.invalid[c.name]=!1,f.showErrors()):(d={},g=a||f.defaultMessage(c,{method:e,parameters:b}),d[c.name]=i.message=g,f.invalid[c.name]=!0,f.showErrors(d)),i.valid=j,f.stopRequest(c,j)}},d)),&quot;</highlight><highlight class="normal">pending</highlight><highlight class="stringliteral">&quot;)}}});var<sp/>b,c={};a.ajaxPrefilter?a.ajaxPrefilter(function(a,b,d){var<sp/>e=a.port;&quot;</highlight><highlight class="normal">abort</highlight><highlight class="stringliteral">&quot;===a.mode&amp;&amp;(c[e]&amp;&amp;c[e].abort(),c[e]=d)}):(b=a.ajax,a.ajax=function(d){var<sp/>e=(&quot;</highlight><highlight class="normal">mode</highlight><highlight class="stringliteral">&quot;in<sp/>d?d:a.ajaxSettings).mode,f=(&quot;</highlight><highlight class="normal">port</highlight><highlight class="stringliteral">&quot;in<sp/>d?d:a.ajaxSettings).port;return&quot;</highlight><highlight class="normal">abort</highlight><highlight class="stringliteral">&quot;===e?(c[f]&amp;&amp;c[f].abort(),c[f]=b.apply(this,arguments),c[f]):b.apply(this,arguments)})});</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nh228u08/Desktop/FinalProject/FinalProject/PCBuilder/packages/jQuery.Validation.1.15.0/Content/Scripts/jquery.validate.min.js"/>
  </compounddef>
</doxygen>
